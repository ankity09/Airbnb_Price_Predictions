bar.data
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar()
bar_plot
### Percentage
combine <- data.frame(credit.data$NPV,credit.cluster)
combine
bar_plot <- ggplot(combine, aes(x = credit.cluster, y = credit.data$NPV)) + geom_bar()
bar_plot
bar_plot <- ggplot(combine, aes(x = credit.cluster, y = credit.data$NPV)) + geom_bar(stat = "identity")
bar_plot
bar_plot <- ggplot(combine, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity")
bar_plot
#bar.data <- group_by(combine,credit.cluster) %>% summarise(sum = sum(credit.data.NPV))
bar.data <- group_by(combine,credit.cluster) %>% summarise(Percent = (n()/1000)*100)
bar_plot <- ggplot(combine, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity")
bar_plot
bar_plot <- ggplot(combine, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity")
bar_plot
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity")
bar_plot
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity",aes(fill = fl) )
bar_plot
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity",aes(fill = dose) )
bar_plot
isntall.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity") + scale_fill_brewer(palette="Dark2")
bar_plot
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity") + scale_fill_brewer(palette="Spectral")
bar_plot
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
avg.data <- group_by(combine,credit.cluster) %>% summarise(Average = mean(credit.data$NPV))
avg.data
#bar.data <- group_by(combine,credit.cluster) %>% summarise(sum = sum(credit.data.NPV))
bar.data <- group_by(combine,credit.cluster) %>% summarise(Percent = (n()/1000)*100)
bar.data
combine
avg.data <- group_by(combine,credit.cluster) %>% summarise(Average = mean(credit.data.NPV))
avg.data
### Percentage
combine <- data.frame(NPV = credit.data$NPV,Clusters = credit.cluster)
#bar.data <- group_by(combine,credit.cluster) %>% summarise(sum = sum(credit.data.NPV))
bar.data <- group_by(combine,credit.cluster) %>% summarise(Percent = (n()/1000)*100)
#bar.data <- group_by(combine,credit.cluster) %>% summarise(sum = sum(credit.data.NPV))
bar.data <- group_by(combine,Clusters) %>% summarise(Percent = (n()/1000)*100)
bar_plot <- ggplot(bar.data, aes(x = credit.cluster, y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
avg.data <- group_by(combine,Clusters) %>% summarise(Average = mean(NPV))
avg.data
library(ggplot2)
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
bar_plot <- ggplot(bar.data, aes(x = as.factor(Clusters), y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
df <- read.table(header=TRUE, text='
cond yval
A 2
B 2.5
C 1.6
')
df2 <- read.table(header=TRUE, text='
cond1 cond2 yval
A      I 2
A      J 2.5
A      K 1.6
B      I 2.2
B      J 2.4
B      K 1.2
C      I 1.7
C      J 2.3
C      K 1.9
')
ggplot(df, aes(x=cond, y=yval)) + geom_bar(stat="identity", fill="#FF9999", colour="black")
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", fill = '##FF9999')
bar_plot
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", fill = '##FF9999')
bar_plot
ggplot(df2, aes(x=cond1, y=yval)) +
geom_line(aes(colour=cond2, group=cond2)) + # colour, group both depend on cond2
geom_point(aes(colour=cond2),               # colour depends on cond2
size=3)
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", aes(colour=cond2, group=cond2))
bar_plot
library(tidyverse)
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", aes(colour=cond2, group=cond2))
bar_plot
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", aes(colour="#999999"))
bar_plot
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", aes(colour="#999999", group = "#E69F00"))
bar_plot
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity"))
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity")
bar_plot + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
bar_plot <- ggplot(bar.data, aes(x = Clusters, y = Percent)) + geom_bar(stat = "identity", fill ='red')
bar_plot
bar_plot <- ggplot(bar.data, aes(factor(Clusters), y = Percent)) + geom_bar(stat = "identity")
bar_plot
bar_plot <- ggplot(bar.data, aes(Clusters, y = Percent)) + geom_bar(stat = "identity", fill = factor(Clusters))
bar_plot <- ggplot(bar.data, aes(Clusters, y = Percent)) + geom_bar(stat = "identity", fill = factor(bar.data$Clusters))
bar_plot
bar_plot <- ggplot(bar.data, aes(Clusters, y = Percent)) + geom_bar(stat = "identity", fill = c("#E69F00", "#56B4E9"))
bar_plot
bar_plot <- ggplot(bar.data, aes(Clusters, y = Percent)) + geom_bar(stat = "identity", fill = c("#E69F00", "#56B4E9","#56B469","#56B$F9","#56B2W9"))
bar_plot
bar_plot <- ggplot(bar.data, aes(Clusters, y = Percent)) + geom_bar(stat = "identity", fill = c("#E69F00", "#56B4E9","#999999","#E69F00","#56B4E9"))
bar_plot
avg.data <- group_by(combine,Clusters) %>% summarise(Average = mean(NPV))
avg.data
source('~/Documents/GitHub/Airbnb_Price_Predictions/NYCAirbnb.R', echo=TRUE)
install.packages("R.utils")
source('~/Documents/GitHub/Airbnb_Price_Predictions/NYCAirbnb.R', echo=TRUE)
source('~/Documents/GitHub/Airbnb_Price_Predictions/NYCAirbnb.R', echo=TRUE)
str(df)
df$host_response_time <- as.factor(df$host_response_time)
df$host_response_time
df$host_response_time <- as.factor(df$host_response_time, levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more")
)
df$host_response_time <- as.factor(df$host_response_time, levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more"))
df$host_response_time <- factor(df$host_response_time,
levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more"))
df$host_response_time
str(df)
df$host_acceptance_rate
df$host_is_superhost <- factor(df$host_is_superhost, levels = c("f","t"))
df$host_is_superhost
df$host_is_superhost <- factor(df$host_is_superhost, levels = c("f","t")) %>% ifelse(df$host_is_superhost = "f",0,1)
df$host_is_superhost <- factor(df$host_is_superhost, levels = c("f","t")) %>% ifelse(df$host_is_superhost =+ "f",0,1)
df$host_is_superhost <- factor(df$host_is_superhost, levels = c("f","t")) %>% ifelse(df$host_is_superhost == "f",0,1)
df$host_is_superhost <- factor(df$host_is_superhost, levels = c("f","t")) %>% ifelse(df$host_is_superhost = "f",0,1)
df$host_is_superhost <- factor(df$host_is_superhost, levels = c("f","t")) %>% ifelse(df$host_is_superhost <- "f",0,1)
df$host_is_superhost <- as.numeric(factor(df$host_is_superhost, levels = c("f","t")) )
df$host_is_superhost
df$host_is_superhost <- as.numeric(factor(df$host_is_superhost, levels = c("f","t"))) -
# cleaning <- function(df){
#   df$extra_people <- as.numeric(gsub("\\$", "", df$extra_people))
#   df$price <- gsub("\\$", "", df$price)
#   df$price <- as.numeric(gsub(",","",df$price))
#   df$security_deposit <- gsub("\\$", "", df$security_deposit)
#   df$security_deposit <- as.numeric(gsub(",","",df$security_deposit))
#   df$security_deposit <- ifelse(is.na(df$security_deposit), 0, df$security_deposit)
#   df$cleaning_fee <- gsub("\\$", "", df$cleaning_fee)
#   df$cleaning_fee <- as.numeric(gsub(",","",df$cleaning_fee))
#   df$cleaning_fee <- ifelse(is.na(df$cleaning_fee), 0, df$cleaning_fee)
# }
#
# cleaning(df)
###
head(df)
df$host_is_superhost <- as.numeric(factor(df$host_is_superhost, levels = c("f","t"))) - 1
df$host_is_superhost
df$host_is_superhost <- as.numeric(factor(df$host_is_superhost, levels = c("f","t"))) - 1
df$host_is_superhost
source('~/Documents/GitHub/Airbnb_Price_Predictions/NYCAirbnb.R', echo=TRUE)
str(df)
df$host_verifications <- factor(df$host_verifications)
df$host_verifications
source('~/Documents/GitHub/Airbnb_Price_Predictions/NYCAirbnb.R', echo=TRUE)
df$host_response_rate
df$host_response_rate <- factor(df$host_response_rate)
df$host_response_rate
df$host_response_rate <- as.numeric(gsub("\\%", "", df$host_response_rate))
df$host_response_rate <- gsub("\\%", "", df$host_response_rate)
df$host_response_rate
df$host_response_rate <- as.numeric(df$host_response_rate)
df$host_response_rate
str(df)
df$host_identity_verified
df$host_identity_verified <- as.numeric(factor(df$host_identity_verified, levels = c("f","t"))) - 1
df$host_identity_verified
str(df)
# Included N/A for now, will have to make changes
df$host_response_time <- factor(df$host_response_time, levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more"))
# Included N/A for now, will have to make changes
df$host_response_time <- factor(df$host_response_time, levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more"))
df$host_verifications <- factor(df$host_verifications)
str(df)
df$neighbourhood
df$neighbourhood <- factor(df$neighbourhood)
df$neighbourhood
str(df)
df$Host_neighbourhood <- factor(df$host_neighbourhood)
df$Host_neighbourhood
df$smart_location <- factor(df$smart_location)
df$smart_location
df$city <- factor(df$city)
df$city
df$neighbourhood_group_cleansed <- factor(df$neighbourhood_group_cleansed)
df$neighbourhood_group_cleansed
df$neighbourhood_group <- factor(df$neighbourhood_group)
df$neighbourhood_group
df$room_type
df$room_type <- factor(df$room_type)
df$room_type
df$has_availability <- factor(df$has_availability)
df$has_availability
str(df)
df$has_availability <- as.numeric(factor(df$has_availability))
df$has_availability
df$host_acceptance_rate
df$host_acceptance_rate <- factor(df$host_acceptance_rate)
df$host_acceptance_rate
df$city <- factor(df$city)
df$city
df$neighbourhood <- factor(df$neighbourhood)
df$neighbourhood
df$neighbourhood
source('~/Documents/GitHub/Airbnb_Price_Predictions/NYCAirbnb.R', echo=TRUE)
apr18 <- read.csv("/Users/ankityadav/Desktop/Spring_2019/DMPA/Project/Data/April_2018/listings.csv", stringsAsFactors = F)
df <- apr18
df <- df[,c(1,23,26:29,32:35,37,39:42,44,46,49:69,71:75,77,80:86,90:92,94:96)]
### removing dollar and comma ###
df$extra_people <- as.numeric(gsub("\\$", "", df$extra_people))
df$price <- gsub("\\$", "", df$price)
df$price <- as.numeric(gsub(",","",df$price))
df$security_deposit <- gsub("\\$", "", df$security_deposit)
df$security_deposit <- as.numeric(gsub(",","",df$security_deposit))
df$security_deposit <- ifelse(is.na(df$security_deposit), 0, df$security_deposit)
df$cleaning_fee <- gsub("\\$", "", df$cleaning_fee)
df$cleaning_fee <- as.numeric(gsub(",","",df$cleaning_fee))
df$cleaning_fee <- ifelse(is.na(df$cleaning_fee), 0, df$cleaning_fee)
df$host_response_rate <- gsub("\\%", "", df$host_response_rate)
df$host_response_rate <- as.numeric(df$host_response_rate)
df$host_response_rate
df$host_is_superhost <- as.numeric(factor(df$host_is_superhost, levels = c("f","t"))) - 1
df$host_identity_verified <- as.numeric(factor(df$host_identity_verified, levels = c("f","t"))) - 1
df$neighbourhood_group <- factor(df$neighbourhood_group)
df$neighbourhood_group_cleansed <- factor(df$neighbourhood_group_cleansed)
df$room_type <- factor(df$room_type)
df$host_response_time <- factor(df$host_response_time, levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more"))
df$has_availability <- as.numeric(factor(df$has_availability))
df$property_type <- factor(df$property_type)
df$bed_type <- factor(df$bed_type)
df$weekly_price <- gsub("\\$", "", df$weekly_price)
df$weekly_price <- as.numeric(gsub(",","",df$weekly_price))
df$monthly_price <- gsub("\\$", "", df$monthly_price)
df$monthly_price <- as.numeric(gsub(",","",df$monthly_price))
df$minimum_nights <- as.numeric(df$minimum_nights)
df$maximum_nights <- as.numeric(df$maximum_nights)
df$neighbourhood <- factor(df$neighbourhood)
#Creating Factors
df$host_verifications <- factor(df$host_verifications)
df$zipcode <- factor(df$zipcode)
df$host_neighbourhood <- factor(df$host_neighbourhood)
# Formatting Date
df$host_since <- as.Date(df$host_since)
# Formatting Integer to Numeric
df$host_listings_count <- as.numeric(df$host_listings_count)
df$host_total_listings_count <- as.numeric(df$host_total_listings_count)
df$accommodates <- as.numeric(df$accommodates)
df$bathrooms <- as.numeric(df$bathrooms)
df$bedrooms <- as.numeric(df$bedrooms)
df$beds <- as.numeric(df$beds)
df$guests_included <- as.numeric(df$guests_included)
df$calculated_host_listings_count <- as.numeric(df$calculated_host_listings_count)
# cleaned variables: is_location_exact,cancellation_policy,require_guest_phone_verification
#is_business_travel_ready,instant_bookable
df$is_location_exact <- as.numeric(factor(df$is_location_exact, levels = c("f","t"))) - 1
df$is_location_exact <- as.factor(df$is_location_exact)
df$cancellation_policy <- as.factor(df$cancellation_policy)
df$require_guest_phone_verification <- as.numeric(factor(df$require_guest_phone_verification, levels = c("f","t"))) - 1
df$require_guest_phone_verification <- as.factor(df$require_guest_phone_verification)
df$is_business_travel_ready <- as.numeric(factor(df$is_business_travel_ready, levels = c("f","t"))) - 1
df$is_business_travel_ready <- as.factor(df$is_business_travel_ready)
df$instant_bookable <- as.numeric(factor(df$instant_bookable, levels = c("f","t"))) - 1
df$instant_bookable <- as.factor(df$instant_bookable)
str(df)
df$neighbourhood_cleansed
df$neighbourhood_cleansed <- df$neighbourhood_cleansed
df$neighbourhood_cleansed
df$neighbourhood_cleansed <- factor(df$neighbourhood_cleansed)
df$neighbourhood_cleansed
str(df)
df$amenities
nyc_map <- get_map(c(left = -74.194098, bottom = 40.538857, right = -73.762397, top = 40.888809), maptype = "toner-lite")
install.packages("choroplethr")
install.packages("choroplethrMaps")
install.packages("choroplethrZip")
install.packages("GGally")
install.packages("lubridate")
install.packages("zoo")
install.packages("scales")
install.packages("ggmap")
install.packages("scales")
install.packages("stringr")
install.packages("zipcode")
install.packages("scales")
install.packages("scales")
install.packages("stringr")
install.packages("zipcode")
install.packages("leaflet")
install.packages("extracat")
install.packages("gridExtra")
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
library(GGally)
library(lubridate)
library(zoo)
library(scales)
library(ggmap)
library(scales)
library(stringr)
library(zipcode)
library(leaflet)
library(extracat)
library(gridExtra)
library(data.table)
library(tidyverse)
library(R.utils)
install.packages("extracat")
nyc_map <- get_map(c(left = -74.194098, bottom = 40.538857, right = -73.762397, top = 40.888809), maptype = "toner-lite")
ggmap(nyc_map)
listingsAnim<- df%>%
mutate(join_year = year(host_since), join_month = month(host_since),
join_date = as.Date(paste(join_month, 1, join_year, sep = "/"), '%m/%d/%Y'))
li_data_smry <- listingsAnim %>%
count(join_year, join_month) %>% ungroup() %>%
arrange(join_year, join_month) %>%
mutate(cumm_n = cumsum(n))
li_data_smry <- li_data_smry[complete.cases(li_data_smry), ]
li_data_smry <- inner_join(li_data_smry, select(listingsAnim, zipcode, latitude, longitude, join_year, join_month, join_date), by = c("join_year" = "join_year", "join_month" = "join_month"))
my_zip_plot <- function(df, plotdate, mapid){
# create the background map. using the darken argument to make the map filled with black color.
g <- ggmap(nyc_map, darken = c("0.8", "black"))
# split the data frame for all Walmarts before a plot date i.e. a month
old_df <- filter(df, join_date < plotdate)
# split the data frame for all Walmarts for the plot date i.e. during a month
new_df <- filter(df, join_date == plotdate)
# plot all the Walmarts before the current opening month. Make all the older store locations as shown in circles smaller
g <- g + geom_point(data = old_df, aes(x = longitude, y = latitude), size = 2, color = "dodgerblue", alpha = 0.2)
#plot all the Walmarts during the current opening month. Make all the newer store locations as shown in circles bigger to get the "pop" effect
g <- g + geom_point(data = new_df, aes(x = longitude, y = latitude), size = 5, color = "dodgerblue", alpha = 0.2)
# remove axis marks, labels, and titles
g <- g + theme(axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank(), plot.title = element_blank())
# place the label for year
g <- g + annotate("text", x = -74.15, y = 40.85, label = "YEAR:", color = "white", size = rel(5), hjust = 0)
# place the value of for year
g <- g + annotate("text", x = -74.15, y = 40.839, label = unique(new_df$join_year), color = "white", size = rel(6), fontface = 2, hjust = 0)
# place the label for stores opened
g <- g + annotate("text", x = -74.15, y = 40.825, label = "LISTING COUNT:", color = "white", size = rel(5), hjust = 0)
# place cumulative store openings
g <- g + annotate("text", x = -74.15, y = 40.814, label = comma(unique(new_df$cumm_n)), color = "white", size = rel(6), fontface = 2, hjust = 0)
# generate the file name for the map. Using str_pad to make the filename same length and prefixed with zeroes.
# create a maps directory inside the directory of this script.
filename <- paste0("maps/img_" , str_pad(mapid, 7, pad = "0"),  ".png")
#this saves the images created.
ggsave(filename = filename, plot = g, width = 13, height = 7, dpi = 150, device = "png")
}
setwd("~/Desktop/Spring_2019/DMPA/Project")
li_data_smry  %>%
mutate(mapid = group_indices_(li_data_smry, .dots = 'join_date')) %>%
group_by(join_date) %>%
do(pl = my_zip_plot(li_data_smry, unique(.$join_date), unique(.$mapid)))
setwd("~/Documents/GitHub/Airbnb_Price_Predictions")
my_zip_plot <- function(df, plotdate, mapid){
# create the background map. using the darken argument to make the map filled with black color.
g <- ggmap(nyc_map, darken = c("0.8", "black"))
# split the data frame for all Walmarts before a plot date i.e. a month
old_df <- filter(df, join_date < plotdate)
# split the data frame for all Walmarts for the plot date i.e. during a month
new_df <- filter(df, join_date == plotdate)
# plot all the Walmarts before the current opening month. Make all the older store locations as shown in circles smaller
g <- g + geom_point(data = old_df, aes(x = longitude, y = latitude), size = 2, color = "dodgerblue", alpha = 0.2)
#plot all the Walmarts during the current opening month. Make all the newer store locations as shown in circles bigger to get the "pop" effect
g <- g + geom_point(data = new_df, aes(x = longitude, y = latitude), size = 5, color = "dodgerblue", alpha = 0.2)
# remove axis marks, labels, and titles
g <- g + theme(axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank(), plot.title = element_blank())
# place the label for year
g <- g + annotate("text", x = -74.15, y = 40.85, label = "YEAR:", color = "white", size = rel(5), hjust = 0)
# place the value of for year
g <- g + annotate("text", x = -74.15, y = 40.839, label = unique(new_df$join_year), color = "white", size = rel(6), fontface = 2, hjust = 0)
# place the label for stores opened
g <- g + annotate("text", x = -74.15, y = 40.825, label = "LISTING COUNT:", color = "white", size = rel(5), hjust = 0)
# place cumulative store openings
g <- g + annotate("text", x = -74.15, y = 40.814, label = comma(unique(new_df$cumm_n)), color = "white", size = rel(6), fontface = 2, hjust = 0)
# generate the file name for the map. Using str_pad to make the filename same length and prefixed with zeroes.
# create a maps directory inside the directory of this script.
filename <- paste0("maps/img_" , str_pad(mapid, 7, pad = "0"),  ".png")
#this saves the images created.
ggsave(filename = filename, plot = g, width = 13, height = 7, dpi = 150, device = "png")
}
li_data_smry  %>%
mutate(mapid = group_indices_(li_data_smry, .dots = 'join_date')) %>%
group_by(join_date) %>%
do(pl = my_zip_plot(li_data_smry, unique(.$join_date), unique(.$mapid)))
getwd()
my_zip_plot(li_data_smry, unique(.$join_date), unique(.$mapid)
)
my_zip_plot(li_data_smry, unique(.$join_date), unique(.$mapid))
my_zip_plot(li_data_smry, unique(join_date), unique(mapid))
my_zip_plot(li_data_smry, unique(li_data_smry$join_date), unique(li_data_smry$mapid))
listingdf1 <- apr18
missingdata<-listingdf1
missingdata[missingdata == ""] <- NA
missingdata <- missingdata %>% select(host_is_superhost,neighbourhood_group_cleansed,review_scores_rating,host_response_time,name,host_since,zipcode)
missingdata <- missingdata %>% rename(!!"Host is superhost" := host_is_superhost,!!"Neighbourhood" := neighbourhood_group_cleansed,!!"Response time" := host_response_time,!!"Listing Name" := name,!!"Host since" := host_since, !!"Zipcode" := zipcode,!!"Review scores rating" := review_scores_rating)
visna(missingdata,sort="c", mar.col = c("#e06f69","#357b8a"))
leaflet(apr18) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,labelOptions = labelOptions(noHide = F),clusterOptions = markerClusterOptions(),popup = paste0("<b> Name: </b>", listingdf$name , "<br/><b> Host Name: </b>", listingdf$host_name, "<br> <b> Price: </b>", listingdf$price, "<br/><b> Room Type: </b>", listingdf$room_type, "<br/><b> Property Type: </b>", listingdf$property_type
)) %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
leaflet(apr18) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,labelOptions = labelOptions(noHide = F),clusterOptions = markerClusterOptions(),popup = paste0("<b> Name: </b>", apr18$name , "<br/><b> Host Name: </b>", apr18$host_name, "<br> <b> Price: </b>", apr18$price, "<br/><b> Room Type: </b>", apr18$room_type, "<br/><b> Property Type: </b>", apr18$property_type
)) %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
leaflet(df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,labelOptions = labelOptions(noHide = F),clusterOptions = markerClusterOptions(),popup = paste0("<b> Name: </b>", df$name , "<br/><b> Host Name: </b>", df$host_name, "<br> <b> Price: </b>", df$price, "<br/><b> Room Type: </b>", df$room_type, "<br/><b> Property Type: </b>", df$property_type
)) %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
leaflet(apr18) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,labelOptions = labelOptions(noHide = F),clusterOptions = markerClusterOptions(),popup = paste0("<b> Name: </b>", apr18$name , "<br/><b> Host Name: </b>", apr18$host_name, "<br> <b> Price: </b>", apr18$price, "<br/><b> Room Type: </b>", apr18$room_type, "<br/><b> Property Type: </b>", apr18$property_type
)) %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
apr18 <- read.csv("/Users/ankityadav/Desktop/Spring_2019/DMPA/Project/Data/April_2018/listings.csv", stringsAsFactors = F)
str(apr18)
framenames <- c('jan18','feb18','mar18','apr18','may18','jun18','jul18','aug18','sep18','oct18','nov18','dec18','jan19','feb19','mar19')
df <- apr18
df <- df[,c(1,5,22:23,26:29,32:35,37,39:42,44,49:69,71:75,77,80:86,90:92,94:96)]
df$extra_people <- as.numeric(gsub("\\$", "", df$extra_people))
df$price <- gsub("\\$", "", df$price)
df$price <- as.numeric(gsub(",","",df$price))
df$security_deposit <- gsub("\\$", "", df$security_deposit)
df$security_deposit <- as.numeric(gsub(",","",df$security_deposit))
df$security_deposit <- ifelse(is.na(df$security_deposit), 0, df$security_deposit)
df$cleaning_fee <- gsub("\\$", "", df$cleaning_fee)
df$cleaning_fee <- as.numeric(gsub(",","",df$cleaning_fee))
df$cleaning_fee <- ifelse(is.na(df$cleaning_fee), 0, df$cleaning_fee)
df$host_response_rate <- gsub("\\%", "", df$host_response_rate)
df$host_response_rate <- as.numeric(df$host_response_rate)
df$host_is_superhost <- as.numeric(factor(df$host_is_superhost, levels = c("f","t"))) - 1
df$host_identity_verified <- as.numeric(factor(df$host_identity_verified, levels = c("f","t"))) - 1
df$neighbourhood_group <- factor(df$neighbourhood_group)
df$neighbourhood_group_cleansed <- factor(df$neighbourhood_group_cleansed)
df$room_type <- factor(df$room_type)
df$host_response_time <- factor(df$host_response_time, levels = c("N/A","within an hour", "within a few hours", "within a day","a few days or more"))
df$has_availability <- as.numeric(factor(df$has_availability))
df$property_type <- factor(df$property_type)
df$bed_type <- factor(df$bed_type)
df$weekly_price <- gsub("\\$", "", df$weekly_price)
df$weekly_price <- as.numeric(gsub(",","",df$weekly_price))
df$monthly_price <- gsub("\\$", "", df$monthly_price)
df$monthly_price <- as.numeric(gsub(",","",df$monthly_price))
df$minimum_nights <- as.numeric(df$minimum_nights)
df$maximum_nights <- as.numeric(df$maximum_nights)
df$neighbourhood <- factor(df$neighbourhood)
df$neighbourhood_cleansed <- factor(df$neighbourhood_cleansed)
df$host_verifications <- factor(df$host_verifications)
df$zipcode <- factor(df$zipcode)
df$host_neighbourhood <- factor(df$host_neighbourhood)
df$host_since <- as.Date(df$host_since)
df$host_listings_count <- as.numeric(df$host_listings_count)
df$host_total_listings_count <- as.numeric(df$host_total_listings_count)
df$accommodates <- as.numeric(df$accommodates)
df$bathrooms <- as.numeric(df$bathrooms)
df$bedrooms <- as.numeric(df$bedrooms)
df$beds <- as.numeric(df$beds)
df$guests_included <- as.numeric(df$guests_included)
df$calculated_host_listings_count <- as.numeric(df$calculated_host_listings_count)
df$is_location_exact <- as.numeric(factor(df$is_location_exact, levels = c("f","t"))) - 1
df$is_location_exact <- as.factor(df$is_location_exact)
df$cancellation_policy <- as.factor(df$cancellation_policy)
df$require_guest_phone_verification <- as.numeric(factor(df$require_guest_phone_verification, levels = c("f","t"))) - 1
df$require_guest_phone_verification <- as.factor(df$require_guest_phone_verification)
df$is_business_travel_ready <- as.numeric(factor(df$is_business_travel_ready, levels = c("f","t"))) - 1
df$is_business_travel_ready <- as.factor(df$is_business_travel_ready)
df$instant_bookable <- as.numeric(factor(df$instant_bookable, levels = c("f","t"))) - 1
df$instant_bookable <- as.factor(df$instant_bookable)
leaflet(df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude,labelOptions = labelOptions(noHide = F),clusterOptions = markerClusterOptions(),popup = paste0("<b> Name: </b>", df$name , "<br/><b> Host Name: </b>", df$host_name, "<br> <b> Price: </b>", df$price, "<br/><b> Room Type: </b>", df$room_type, "<br/><b> Property Type: </b>", df$property_type
)) %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
zipReviews <- apr18 %>% group_by(zipcode = zipcode) %>% summarise(avg_loc_review = mean(review_scores_location, na.rm = TRUE))
colnames(zipReviews) <- c("region","value")
zipReviews$region <- as.character(zipReviews$region)
nyc_fips = c(36005, 36047, 36061, 36081, 36085)
g_locations <- zip_choropleth(zipReviews,
county_zoom = nyc_fips,
title = "Location Review Scores by Region",
legend = "Average Score") + ggtitle("Which area is the best?",
subtitle = "Map showing Average Location Score by Area") +
theme(plot.title = element_text(face = "bold")) +
theme(plot.subtitle = element_text(face = "bold", color = "grey35")) +
theme(plot.caption = element_text(color = "grey68"))+scale_color_gradient(low="#d3cbcb", high="#852eaa")+ scale_fill_brewer("Location Review Score",palette=3)
install.packages("choroplethrZip")
install.packages("choroplethrZip")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.4.0')
install_github('arilamstein/choroplethrZip@v1.5.0')
install.packages("choroplethrZip")
library(choroplethrZip)
zipPrices <- df %>% group_by(zipcode = zipcode) %>% summarise(avg_price = mean(price, na.rm = TRUE))
library(choroplethr)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
library(GGally)
